/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.area.areashapes;

import server.zone.objects.area.areashapes.AreaShape;
include engine.util.u3d.Vector3;

class RectangularAreaShape extends AreaShape {

	/** The bottom bottom left corner of the rectangle. */
	protected float bblX;
	protected float bblY;
	protected float bblZ;

	/** The bottom upper right corner of the rectangle. */
	protected float burX;
	protected float burY;
	protected float burZ;

	/** The top bottom left corner of the rectangle. */
	protected float tblX;
	protected float tblY;
	protected float tblZ;

	/** The top upper right corner of the rectangle. */
	protected float turX;
	protected float turY;
	protected float turZ;

	protected float length;

	/** Constructor */
	public RectangularAreaShape() {
		super();
		bblX = 0;
		bblY = 0;
		bblZ = 0;
		burX = 0;
		burY = 0;
		burZ = 0;
		tblX = 0;
		tblY = 0;
		tblZ = 0;
		turX = 0;
		turY = 0;
		turZ = 0;
	}

	/**
	 * Set the dimensions of the rectangle.
	 * @param h the height of the rectangle.
	 * @param w the width of the rectangle.
	 */
	@preLocked
	public void setDimensions(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4) {
		bblX = x1;
		bblY = y1;
		bblZ = z1;
		burX = x2;
		burY = y2;
		burZ = z2;
		tblX = x3;
		tblY = y3;
		tblZ = z3;
		turX = x4;
		turY = y4;
		turZ = z4;
	}

	/**
	 * Get the height of the rectangle.
	 * @return height of the rectangle.
	 */
	@read
	public float getHeight() {
		return burY - bblY;
	}

	@read
	public float getLength() {
		return tblZ - bblZ;
	}

	/**
	 * Get the width of the rectangle.
	 * @return width of the rectangle.
	 */
	@read
	public float getWidth() {
		return burX - bblX;
	}

	/**
	 * Check if the coordinate is within the area shape.
	 * @param x the x coordinate.
	 * @param y the y coordinate.
	 * @return true if the coordinate is within the area shape.
	 */
	@read
	public native boolean containsPoint(float x, float y, float z);

	/**
	 * Check if the coordinate is within the area shape.
	 * @param point the point to check if it is within the area shape.
	 * @return true if the coordinate is within the area shape.
	 */
	@dereferenced
	@local
	@read
	public native boolean containsPoint(@dereferenced final Vector3 point);

	/**
	 * Generate a random position within the area.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native Vector3 getRandomPosition();

	/**
	 * Generate a random position within the area with the supplied origin and radius as limits.
	 * @param origin the origin coordinate to generate the random position from.
	 * @param minDistance the minimum distance from the origin.
	 * @param maxDistance the maximum distance from the origin.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native Vector3 getRandomPosition(@dereferenced final Vector3 origin, float minDistance, float maxDistance);

	/**
	 * Check if this is a rectangular area shape.
	 * @return true if it is a rectangular area shape.
	 */
	@read
	public boolean isRectangularAreaShape() {
		return true;
	}

	/**
	 * Check if this area shape intersects with the supplied area shape.
	 * @param areaShape the area shape to check for intersections with.s
	 * @return true if the area shapes intersects each other.
	 */
	@read
	public native boolean intersectsWith(AreaShape areaShape);

	/**
	 * Calculates the point in the area that has the shortest distance to the supplied
	 * position.
	 * @param position the position to find the closest point towards.
	 * @return the closest point inside the area.
	 */
	@dereferenced
	@local
	@read
	private native Vector3 getClosestPoint(@dereferenced final Vector3 position);

	/**
	 * Calculates the point in the area that has the longest distance to the supplied
	 * position.
	 * @param position the position to find the closest point towards.
	 * @return the farthest point inside the area.
	 */
	@dereferenced
	@local
	@read
	private native Vector3 getFarthestPoint(@dereferenced final Vector3 position);

	/**
	 * Get the area of the areaShape.
	 * @return the area of the area shape.
	 */
	@read
	public float getArea() {
		return getHeight() * getWidth() * getLength();
	}
}
